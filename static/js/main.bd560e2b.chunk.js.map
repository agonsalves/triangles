{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Triangle","memo","dimensions","type","updateValue","position","Model","viewBox","xmlns","className","onClick","points","fill","Frame","styled","div","size","svg","Quadrant","number","Button","flip","App","useState","quadrant","y","x","push","Math","floor","random","buildQuadrant","values","setValues","isUpdating","setIsUpdating","old","value","updated","useEffect","interval","setInterval","clearInterval","map","key","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4/BAGA,IAAMA,EAAWC,gBAAK,gBAAEC,EAAF,EAAEA,WAAYC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,SAAjC,OAClB,kBAACC,EAAD,CACIC,QAAQ,cACRC,MAAM,6BACNN,WAAYA,EACZC,KAAMA,EACNM,UAAS,eAAUN,GACnBO,QAAS,kBAAMN,EAAYC,KAE3B,6BAASM,OAAO,sBAAsBC,KAAK,cAG7CC,EAAQC,IAAOC,IAAV,KAEE,qBAAEC,QACD,qBAAEA,QAQVV,EAAQQ,IAAOG,IAAV,KACE,mBAAkB,IAAlB,EAAEf,cACA,mBAAkB,IAAlB,EAAEA,cACO,mBAAmB,GAAnB,EAAEC,QAIpBe,EAAWJ,IAAOC,IAAV,KAIU,mBAAuB,GAAvB,EAAEI,UACR,qBAAEA,OAAqB,KAGnCC,EAASN,IAAOC,IAAV,KAyBNM,EAAO,SAAAlB,GAAI,OAAa,IAATA,EAAa,EAAa,IAATA,EAAa,EAAIA,GA0DxCmB,EAxDH,WACR,IADc,EAKcC,mBAxBV,SAAArB,GAElB,IADA,IAAIsB,EAAW,GACNC,EAAI,EAAGA,EAAIvB,EAAYuB,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAYwB,IACxBD,GAAKC,EACLF,EAASG,KAPGC,KAAKC,MAAsB,EAAhBD,KAAKE,WAS5BN,EAASG,KAAKN,EAAKG,EAAUE,EAAIxB,EAAcuB,KAK3D,OAAOD,EAY8BO,CAJlB,KADL,mBAKPC,EALO,KAKCC,EALD,OAMsBV,oBAAS,GAN/B,mBAMPW,EANO,KAMKC,EANL,KASR/B,EAAc,SAAAC,GAChB,IAAMqB,EAAMrB,EAAWA,EATR,GASgC,EACzCoB,EAAIG,KAAKC,MAAMxB,EAVN,IAYf4B,GAAU,SAAAG,GACN,IAlBMC,EAkBFC,EAAO,YAAOF,IAClBE,EAAQjC,GAnBiB,KAAnBgC,EAmBwBD,EAAI/B,IAnBL,EAAIgC,EAAQ,EAqBrCX,IAAMD,KAENa,EAlBO,GAiBOZ,EAAkBD,GACdJ,EAAKiB,EAAQjC,KAGnC,OAAOiC,MAYf,OARAC,qBAAU,WACN,IAAIC,EAIJ,OAHIN,IACAM,EAAWC,aAAY,kBAAMrC,EAAYwB,KAAKC,MAAM,IAAAD,KAAKE,aAA2C,MAEjG,kBAAMY,cAAcF,MAC5B,CAACN,IAGA,yBAAKzB,UAAU,OACX,kBAACI,EAAD,CAAOG,KAhCDd,KAGJ,CAAC,EAAG,EAAG,EAAG,GA8BLyC,KAAI,SAAAxB,GAAM,OACT,kBAACD,EAAD,CAAUC,OAAQA,EAAQV,UAAU,WAAWmC,IAAKzB,GAC/Ca,EAAOW,KAAI,SAACxC,EAAM0C,GAAP,OACR,kBAAC7C,EAAD,CACIE,WAxCT,GAyCSC,KAAMA,EACNyC,IAAKC,EACLxC,SAAUwC,EACVzC,YAAaA,YAMjC,kBAACgB,EAAD,CAAQV,QAAS,kBAAMyB,GAAc,SAAAD,GAAU,OAAKA,UC3G5CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd560e2b.chunk.js","sourcesContent":["import React, {memo, useState, useEffect} from 'react'\nimport styled            from 'styled-components'\n\nconst Triangle = memo(({dimensions, type, updateValue, position}) =>\n    <Model\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        dimensions={dimensions}\n        type={type}\n        className={`type-${type}`}\n        onClick={() => updateValue(position)}\n    >\n        <polygon points=\"0 0, 100 100, 0 100\" fill=\"black\"/>\n    </Model>)\n\nconst Frame = styled.div`\n    display: grid;\n    width: ${({size}) => size}px;\n    height: ${({size}) => size}px;\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas:\n        \"q4 q1\"\n        \"q3 q2\";\n`\n\nconst Model = styled.svg`\n    width: ${({dimensions}) => 100 / (dimensions)}%;\n    height:  ${({dimensions}) => 100 / (dimensions)}%;\n    transform: rotate(${({type}) => type * 90}deg);\n    transition: transform .3s ease-out;\n`\n\nconst Quadrant = styled.div`\n    display: flex;\n    flex-wrap: wrap-reverse;\n    align-items: flex-end;\n    transform: rotate(${({number}) => number * 90}deg);\n    grid-area: q${({number}) => number + 1};\n`\n\nconst Button = styled.div`\n    width: 100px;\n    height: 100px;\n    cursor: pointer;\n`\n\nconst getRandomType = () => Math.floor(Math.random() * 4)\n\nconst buildQuadrant = dimensions => {\n    let quadrant = []\n    for (let y = 0; y < dimensions; y++) {\n        for (let x = 0; x < dimensions; x++) {\n            if (y <= x)\n                quadrant.push(getRandomType())\n            else {\n                quadrant.push(flip(quadrant[(x * dimensions) + y]))\n            }\n        }\n    }\n\n    return quadrant\n}\n\nconst increment = value => value === 3 ? 0 : value + 1\n\nconst flip = type => type === 1 ? 3 : type === 3 ? 1 : type\n\nconst App = () => {\n    const dimensions = 12\n    const squareSize = 40\n\n    const size = (dimensions * 2) * squareSize\n    const [values, setValues] = useState(buildQuadrant(dimensions))\n    const [isUpdating, setIsUpdating] = useState(false)\n    const q = [0, 1, 2, 3]\n\n    const updateValue = position => {\n        const x = !!position ? position % dimensions : 0\n        const y = Math.floor(position / dimensions)\n\n        setValues(old => {\n            let updated = [...old]\n            updated[position] = increment(old[position])\n\n            if (x !== y) {\n                let mirror = (x * dimensions) + y\n                updated[mirror] = flip(updated[position])\n            }\n\n            return updated\n        })\n    }\n\n    useEffect(() => {\n        let interval\n        if (isUpdating)\n            interval = setInterval(() => updateValue(Math.floor(Math.random() * (dimensions * dimensions -1))), 500)\n\n        return () => clearInterval(interval)\n    }, [isUpdating])\n\n    return (\n        <div className=\"App\">\n            <Frame size={size}>\n                {q.map(number =>\n                    <Quadrant number={number} className=\"quadrant\" key={number}>\n                        {values.map((type, i) =>\n                            <Triangle\n                                dimensions={dimensions}\n                                type={type}\n                                key={i}\n                                position={i}\n                                updateValue={updateValue}\n                            />\n                        )}\n                    </Quadrant>\n                )}\n            </Frame>\n            <Button onClick={() => setIsUpdating(isUpdating => !isUpdating)} />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}